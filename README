# Tema 1 SD - Music Playlist
### Necula Bianca 315CA

Rezolvarea temei 1 la materia Structuri de date. In proiect sunt incluse 3 fisiere:
* main.c : rezolvarea enuntului 
* DoublyLinkedList.c : implementarea functiilor pentru listele dublu inlantuite
* DoublyLinkedList.h : definitiile functiilor si declararea strcturilor DoublyLinkedList, Node si Meta

### main.c

* Deschiderea fisierelor de I/O.
* Citirea comenzilor din fisierul de input, prelucrarea si efectuarea acestora.
* Implementarea playlistului se realizeaza cu ajutorul unei liste dublu inlantuite.
* Pentru comenzile care au ca parametru o melodie se deschide fisierul melodiei, se citesc metadatele (ultimii 97 bytes) si se salveaza intr-o structura de tip Meta.
* Se apeleaza functii specifice fiecarei comenzi.
* La final, se elibereaza memoria alocata pentru lista.

### DoublyLinkedList.c / DoublyLinkedList.h

* Implementarea functiilor specifice unei liste dublu inlanuite.
 
```C
// initializarea listei
struct DoublyLinkedList *create_list();
// adaugarea primului nod 
void add_first(struct DoublyLinkedList *list, struct Meta meta, FILE *out);
// adaugarea ultimului nod
void add_last(struct DoublyLinkedList *list, struct Meta meta, FILE *out);
// adaugarea nodului dupa pozitia cursorului
void add_after(struct DoublyLinkedList *list, struct Meta meta, FILE *out);
// stergerea primului nod
void del_first(struct DoublyLinkedList *list, FILE *out);
// stergerea ultimului nod
void del_last(struct DoublyLinkedList *list, FILE *out);
// stergerea nodului de pe pozitia cursorului
void del_curr(struct DoublyLinkedList *list, FILE *out);
// stergerea melodiei date ca parametru
void del_song(struct DoublyLinkedList *list, struct Meta meta, FILE *out);
// mutarea cursorului pe urmatoarea pozitie
void move_next(struct DoublyLinkedList *list, FILE *out);
// mutarea cursorului pe pozitia anterioara 
void move_prev(struct DoublyLinkedList *list, FILE *out);
// afisarea informatiilor despre primul nod
void show_first(struct DoublyLinkedList *list, FILE *out);
// afisarea informatiilor despre ultimul nod
void show_last(struct DoublyLinkedList *list, FILE *out);
// afisarea informatiilor despre nodul de pe pozitia curenta a cursorului
void show_curr(struct DoublyLinkedList *list, FILE *out);
// afisarea tuturor melodiilor din lista
void show_playlist(struct DoublyLinkedList *list, FILE *out);
// eliberarea memoriei folosite 
void free_list(struct DoublyLinkedList *list);
```
Pentru informatii despre cazurile particulare, se vor citi comentariile din fisierul DoublyLinkedList.c.

## Utilizare

```bash
gcc -o tema1 main.c DoublyLinkedList.c
./tema1 <media.in> <media.out>
```

